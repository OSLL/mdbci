#!/usr/bin/env ruby

require 'open3'
require 'getoptlong'
require 'json'


ARG_COMMAND = '--c'
ARG_FILENAME = '--filename'


# Reading options
opts = GetoptLong.new(
    [ARG_COMMAND, GetoptLong::REQUIRED_ARGUMENT],
    [ARG_FILENAME, GetoptLong::REQUIRED_ARGUMENT]
)


opts.each do |opt, arg|
    case opt        
        when ARG_FILENAME
            if arg != ''; FILENAME = arg; end
        when ARG_COMMAND
            if arg != ''; COMMAND = arg; end
    end
end


def command
    Open3.popen3(COMMAND) do |stdin, stdout, stderr, wthr|
        stdin.close
        puts 'exitcode', wthr.value.exitstatus
        if !wthr.value.success?
            puts 'stderr', stderr.read
            raise "Error while executing command " + COMMAND
        else
            puts 'stdout', stdout.read
        end
        stdout.close
        return wthr.value.exitstatus
    end
end


def validate
    exit_code = 1
    config = IO.read(FILE_NAME)
    begin
        res = JSON.parse(config)
    rescue 
        puts "ERROR WHILE PARSING FILE"
        return -1
    end
    if res[KEY_STR].class != String
        raise "Value type in str key is not valid ERROR"
        return -1
    end
    if res[KEY_ARR].class != Array
        raise "Value type in arr key is not valid ERROR"
        return -1
    else
        if res[KEY_ARR].size != 5
            raise "Value in arr key doesn't have valid size ERROR"
            return -1
        end
    end
    return exit_code
end


def commands
    exit_code = 1
    case ARGV.shift
        when 'run_command'
            exit_code = command(ARGV.shift)
        when 'validate'
            exit_code = validate(ARGV.shift)
    end
    return exit_code
end

begin
    exit_code = commands
rescue Exception => error
    exit_code =  1
end

if exit_code != 1
    puts 'OK'
end

exit exit_code
