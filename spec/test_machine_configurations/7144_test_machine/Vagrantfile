require 'json'
# !! Generated content, do not edit !!
# Generated by MariaDB Continuous Integration Tool (http://github.com/OSLL/mdbci)


####  Created 2016-07-14T15:53:12+02:00 ####


### Vagrant configuration block  ###
####################################
Vagrant.configure(2) do |config|

config.omnibus.chef_version = '12.9.38'

### Default (VBox, Libvirt, Docker) Provider config ###
#######################################################
# Network autoconfiguration
config.vm.network "private_network", type: "dhcp"

config.vm.boot_timeout = 60

#  --> Begin definition for machine: node0

config.vm.define "node0" do |node0|

	node0.vm.synced_folder "~/build-scripts/test-setup-scripts/cnf", "/home/vagrant/cnf_templates"
	node0.vm.provider "docker" do |d|
		d.image = JSON.parse(File.read('/home/vagranttest/mdbci_berlenko/mdbci/test_machine/node0/snapshots'))['node0']['current_snapshot']
		d.privileged = true
 		d.has_ssh = true
		d.privileged = true
 		d.create_args = ["-v", "/sys/fs/cgroup:/sys/fs/cgroup"]
		d.cmd = ["/usr/sbin/init"]
		d.env = {"container"=>"docker"}
	end	##--- Chef binding ---

	node0.vm.provision "chef_solo" do |chef| 
		chef.cookbooks_path = "../recipes/cookbooks/"
		chef.roles_path = "."
		chef.add_role "node0"
	end
end #  <-- End of Docker definition for machine: node0


#  --> Begin definition for machine: node1

config.vm.define "node1" do |node1|

	node1.vm.synced_folder "~/build-scripts/test-setup-scripts/cnf", "/home/vagrant/cnf_templates"
	node1.vm.provider "docker" do |d|
		d.image = JSON.parse(File.read('/home/vagranttest/mdbci_berlenko/mdbci/test_machine/node1/snapshots'))['node1']['current_snapshot']
		d.privileged = true
 		d.has_ssh = true
		d.privileged = true
 		d.create_args = ["-v", "/sys/fs/cgroup:/sys/fs/cgroup"]
		d.cmd = ["/usr/sbin/init"]
		d.env = {"container"=>"docker"}
	end	##--- Chef binding ---

	node1.vm.provision "chef_solo" do |chef| 
		chef.cookbooks_path = "../recipes/cookbooks/"
		chef.roles_path = "."
		chef.add_role "node1"
	end
end #  <-- End of Docker definition for machine: node1


#  --> Begin definition for machine: node2

config.vm.define "node2" do |node2|

	node2.vm.synced_folder "~/build-scripts/test-setup-scripts/cnf", "/home/vagrant/cnf_templates"
	node2.vm.provider "docker" do |d|
		d.image = JSON.parse(File.read('/home/vagranttest/mdbci_berlenko/mdbci/test_machine/node2/snapshots'))['node2']['current_snapshot']
		d.privileged = true
 		d.has_ssh = true
		d.privileged = true
 		d.create_args = ["-v", "/sys/fs/cgroup:/sys/fs/cgroup"]
		d.cmd = ["/usr/sbin/init"]
		d.env = {"container"=>"docker"}
	end	##--- Chef binding ---

	node2.vm.provision "chef_solo" do |chef| 
		chef.cookbooks_path = "../recipes/cookbooks/"
		chef.roles_path = "."
		chef.add_role "node2"
	end
end #  <-- End of Docker definition for machine: node2


#  --> Begin definition for machine: node3

config.vm.define "node3" do |node3|

	node3.vm.synced_folder "~/build-scripts/test-setup-scripts/cnf", "/home/vagrant/cnf_templates"
	node3.vm.provider "docker" do |d|
		d.image = JSON.parse(File.read('/home/vagranttest/mdbci_berlenko/mdbci/test_machine/node3/snapshots'))['node3']['current_snapshot']
		d.privileged = true
 		d.has_ssh = true
		d.privileged = true
 		d.create_args = ["-v", "/sys/fs/cgroup:/sys/fs/cgroup"]
		d.cmd = ["/usr/sbin/init"]
		d.env = {"container"=>"docker"}
	end	##--- Chef binding ---

	node3.vm.provision "chef_solo" do |chef| 
		chef.cookbooks_path = "../recipes/cookbooks/"
		chef.roles_path = "."
		chef.add_role "node3"
	end
end #  <-- End of Docker definition for machine: node3


#  --> Begin definition for machine: galera0

config.vm.define "galera0" do |galera0|

	galera0.vm.synced_folder "~/build-scripts/test-setup-scripts/cnf", "/home/vagrant/cnf_templates"
	galera0.vm.provider "docker" do |d|
		d.image = JSON.parse(File.read('/home/vagranttest/mdbci_berlenko/mdbci/test_machine/galera0/snapshots'))['galera0']['current_snapshot']
		d.privileged = true
 		d.has_ssh = true
		d.privileged = true
 		d.create_args = ["-v", "/sys/fs/cgroup:/sys/fs/cgroup"]
		d.cmd = ["/usr/sbin/init"]
		d.env = {"container"=>"docker"}
	end	##--- Chef binding ---

	galera0.vm.provision "chef_solo" do |chef| 
		chef.cookbooks_path = "../recipes/cookbooks/"
		chef.roles_path = "."
		chef.add_role "galera0"
	end
end #  <-- End of Docker definition for machine: galera0


#  --> Begin definition for machine: galera1

config.vm.define "galera1" do |galera1|

	galera1.vm.synced_folder "~/build-scripts/test-setup-scripts/cnf", "/home/vagrant/cnf_templates"
	galera1.vm.provider "docker" do |d|
		d.image = JSON.parse(File.read('/home/vagranttest/mdbci_berlenko/mdbci/test_machine/galera1/snapshots'))['galera1']['current_snapshot']
		d.privileged = true
 		d.has_ssh = true
		d.privileged = true
 		d.create_args = ["-v", "/sys/fs/cgroup:/sys/fs/cgroup"]
		d.cmd = ["/usr/sbin/init"]
		d.env = {"container"=>"docker"}
	end	##--- Chef binding ---

	galera1.vm.provision "chef_solo" do |chef| 
		chef.cookbooks_path = "../recipes/cookbooks/"
		chef.roles_path = "."
		chef.add_role "galera1"
	end
end #  <-- End of Docker definition for machine: galera1


#  --> Begin definition for machine: galera2

config.vm.define "galera2" do |galera2|

	galera2.vm.synced_folder "~/build-scripts/test-setup-scripts/cnf", "/home/vagrant/cnf_templates"
	galera2.vm.provider "docker" do |d|
		d.image = JSON.parse(File.read('/home/vagranttest/mdbci_berlenko/mdbci/test_machine/galera2/snapshots'))['galera2']['current_snapshot']
		d.privileged = true
 		d.has_ssh = true
		d.privileged = true
 		d.create_args = ["-v", "/sys/fs/cgroup:/sys/fs/cgroup"]
		d.cmd = ["/usr/sbin/init"]
		d.env = {"container"=>"docker"}
	end	##--- Chef binding ---

	galera2.vm.provision "chef_solo" do |chef| 
		chef.cookbooks_path = "../recipes/cookbooks/"
		chef.roles_path = "."
		chef.add_role "galera2"
	end
end #  <-- End of Docker definition for machine: galera2


#  --> Begin definition for machine: galera3

config.vm.define "galera3" do |galera3|

	galera3.vm.synced_folder "~/build-scripts/test-setup-scripts/cnf", "/home/vagrant/cnf_templates"
	galera3.vm.provider "docker" do |d|
		d.image = JSON.parse(File.read('/home/vagranttest/mdbci_berlenko/mdbci/test_machine/galera3/snapshots'))['galera3']['current_snapshot']
		d.privileged = true
 		d.has_ssh = true
		d.privileged = true
 		d.create_args = ["-v", "/sys/fs/cgroup:/sys/fs/cgroup"]
		d.cmd = ["/usr/sbin/init"]
		d.env = {"container"=>"docker"}
	end	##--- Chef binding ---

	galera3.vm.provision "chef_solo" do |chef| 
		chef.cookbooks_path = "../recipes/cookbooks/"
		chef.roles_path = "."
		chef.add_role "galera3"
	end
end #  <-- End of Docker definition for machine: galera3


#  --> Begin definition for machine: maxscale

config.vm.define "maxscale" do |maxscale|


	maxscale.vm.provider "docker" do |d|
		d.image = JSON.parse(File.read('/home/vagranttest/mdbci_berlenko/mdbci/test_machine/maxscale/snapshots'))['maxscale']['current_snapshot']
		d.privileged = true
 		d.has_ssh = true
		d.env = {"container"=>"docker"}
	end	##--- Chef binding ---

	maxscale.vm.provision "chef_solo" do |chef| 
		chef.cookbooks_path = "../recipes/cookbooks/"
		chef.roles_path = "."
		chef.add_role "maxscale"
	end
end #  <-- End of Docker definition for machine: maxscale


end   ## end of Vagrant configuration block
