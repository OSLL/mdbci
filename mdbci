#!/usr/bin/env ruby
# frozen_string_literal: true

require 'getoptlong'


# Reading options
opts = GetoptLong.new(
  ['--attempts', '-a', GetoptLong::REQUIRED_ARGUMENT],
  ['--box-name', '-n', GetoptLong::REQUIRED_ARGUMENT],
  ['--boxes', '-b', GetoptLong::REQUIRED_ARGUMENT],
  ['--command', '-c', GetoptLong::REQUIRED_ARGUMENT],
  ['--configuration-file', GetoptLong::REQUIRED_ARGUMENT],
  ['--cpu-count', GetoptLong::REQUIRED_ARGUMENT],
  ['--threads', GetoptLong::REQUIRED_ARGUMENT],
  ['--field', '-f', GetoptLong::REQUIRED_ARGUMENT],
  ['--force-distro', GetoptLong::REQUIRED_ARGUMENT],
  ['--help', GetoptLong::NO_ARGUMENT],
  ['--ipv6', GetoptLong::NO_ARGUMENT],
  ['--key', '-k', GetoptLong::REQUIRED_ARGUMENT],
  ['--keep-template', GetoptLong::NO_ARGUMENT],
  ['--labels', '-l', GetoptLong::REQUIRED_ARGUMENT],
  ['--list', GetoptLong::NO_ARGUMENT],
  ['--node-name', GetoptLong::REQUIRED_ARGUMENT],
  ['--override', '-w', GetoptLong::NO_ARGUMENT],
  ['--path-to-nodes', GetoptLong::REQUIRED_ARGUMENT],
  ['--platform', '-o', GetoptLong::REQUIRED_ARGUMENT],
  ['--platform-version', '-i', GetoptLong::REQUIRED_ARGUMENT],
  ['--product', '-p', GetoptLong::REQUIRED_ARGUMENT],
  ['--product-version', '-v', GetoptLong::REQUIRED_ARGUMENT],
  ['--recreate', GetoptLong::NO_ARGUMENT],
  ['--reinstall', GetoptLong::NO_ARGUMENT],
  ['--repo-dir', '-r', GetoptLong::REQUIRED_ARGUMENT],
  ['--silent', '-s', GetoptLong::NO_ARGUMENT],
  ['--snapshot-name', GetoptLong::REQUIRED_ARGUMENT],
  ['--template', '-t', GetoptLong::REQUIRED_ARGUMENT],
)

$mdbci_exec_dir = File.expand_path(File.dirname(File.realpath(__FILE__)))
$LOAD_PATH.unshift($mdbci_exec_dir) unless $LOAD_PATH.include?($mdbci_exec_dir)

require 'core/session'
require 'core/node_product'
require 'core/out'
require 'core/exception_handler'
require 'core/services/version'

session = Session.new
$session = session
session.template_file = 'instance.json'
$exception_handler = ExceptionHandler.new
session.ipv6 = false

out = Out.new(session)
$out = out

Dir.chdir ENV['OLD_CWD'] unless ENV['OLD_CWD'].nil?

Dir.chdir ENV['MDBCI_VM_PATH'] unless ENV['MDBCI_VM_PATH'].nil?
$work_dir = Dir.pwd

session.mdbci_dir = $mdbci_exec_dir
session.starting_dir = $current_dir
session.working_dir = $work_dir

ENV['LIBVIRT_DEFAULT_URI'] = 'qemu:///system'

begin
  opts.each do |opt, arg|
    case opt
    when '--silent'
      session.isSilent = true

    when '--template'
      session.template_file = arg unless arg.empty?

    when '--boxes'
      session.boxes_location = arg unless arg.empty?

    when '--box-name'
      session.boxName = arg unless arg.empty?

    when '--field'
      session.field = arg unless arg.empty?

    when '--override'
      session.override = true

    when '--command'
      session.command = arg

    when '--cpu-count'
      session.cpu_count = arg

    when '--threads'
      session.threads_count = arg.to_i

    when '--repo-dir'
      session.repo_dir = arg

    when '--attempts'
      session.attempts = arg

    when '--product'
      session.nodeProduct = arg unless arg.empty?

    when '--product-version'
      session.productVersion = arg unless arg.empty?

    when '--key'
      session.keyFile = File.absolute_path(arg) unless arg.empty?

    when '--keep-template'
      session.keep_template = true

    when '--list'
      session.list = true

    when '--platform'
      session.boxPlatform = arg unless arg.empty?

    when '--platform-version'
      session.boxPlatformVersion = arg unless arg.empty?

    when '--path-to-nodes'
      session.path_to_nodes = arg

    when '--node-name'
      session.node_name = arg

    when '--snapshot-name'
      session.snapshot_name = arg

    when '--ipv6'
      session.ipv6 = true

    when '--configuration-file'
      session.configuration_file = File.absolute_path(arg)

    when '--help'
      session.show_help = true

    when '--reinstall'
      session.reinstall = true

    when '--recreate'
      session.recreate = true

    when '--labels'
      session.labels = arg

    when '--force-distro'
      session.force_distro = arg

    else
      out.error 'Option is not supported: ' + opt
    end
  end
rescue GetoptLong::MissingArgument => error
  out.error error.backtrace.join("\n")
  out.error error.to_s
  exit 1
end

# Greeting user
out.info "MariaDB CI CLI, version: #{Version.version(session.mdbci_dir, out)}"
out.info "mdbci called with: #{ARGV.join(' ')}"
session.initialize_services

# run commands and return 0 for success, 1 for error
begin
  exit_code = session.commands
rescue StandardError => error
  out.error error.backtrace.join("\n")
  out.error error.to_s
  exit_code = 1
end
exit exit_code
