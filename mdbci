#!/usr/bin/env ruby

require 'getoptlong'

require_relative 'core/help'
require_relative 'core/generator'
require_relative 'core/session'
require_relative 'core/node_product'
require_relative 'core/out'
require_relative 'core/exception_handler'

#Reading options
opts = GetoptLong.new(
    ['--help', '-h', GetoptLong::NO_ARGUMENT],
    ['--template', '-t', GetoptLong::REQUIRED_ARGUMENT],
    ['--command', '-c', GetoptLong::REQUIRED_ARGUMENT],
    ['--boxes', '-b', GetoptLong::REQUIRED_ARGUMENT],
    ['--box-name', '-n', GetoptLong::REQUIRED_ARGUMENT],
    ['--field', '-f', GetoptLong::REQUIRED_ARGUMENT],
    ['--override', '-w', GetoptLong::NO_ARGUMENT],
    ['--silent', '-s', GetoptLong::NO_ARGUMENT],
    ['--repo-dir','-r',GetoptLong::REQUIRED_ARGUMENT],
    ['--attempts','-a',GetoptLong::REQUIRED_ARGUMENT],
    ['--product','-p',GetoptLong::REQUIRED_ARGUMENT],
    ['--product-version','-v',GetoptLong::REQUIRED_ARGUMENT],
    ['--key','-k',GetoptLong::REQUIRED_ARGUMENT],
    ['--platform','-o',GetoptLong::REQUIRED_ARGUMENT],
    ['--platform-version','-i',GetoptLong::REQUIRED_ARGUMENT]
)

$session = Session.new
$session.configFile='instance.json'
$session.boxesFile='boxes.json'
$session.awsConfigFile='aws-config.yml'
$exception_handler = ExceptionHandler.new

$out = Out.new

opts.each do |opt, arg|
  case opt
    when '--template'
      if arg != ''; $session.configFile = arg; end
      $out.info 'Using template name '+$session.configFile

    when '--boxes'
      if arg != ''; $session.boxesFile = arg; end
      $out.info 'Using boxes name '+$session.boxesFile

    when '--box-name'
      if arg != ''; $session.boxName = arg; end
      $out.info 'Using boxes name '+ $session.boxName

    when '--field'
      if arg != ''; $session.field = arg; end
      $out.info 'Using boxes field '+$session.field

    when '--help'
      Help.display
      exit

    when '--override'
      $session.isOverride = true

    when '--command'
      $session.command = arg

    when '--silent'
      $session.isSilent = true

    when '--repo-dir'
      $session.repoDir = arg

    when '--attempts'
      $session.attempts = arg

    when '--product'
      if arg != ''; $session.nodeProduct = arg; end

    when '--product-version'
      if arg != ''; $session.productVersion = arg; end

    when '--key'
      if arg != ''; $session.keyFile = arg; end
      $out.info 'Using keyfile '+$session.keyFile

    when '--platform'
      if arg != ''; $session.boxPlatform = arg; end

    when '--platform-version'
      if arg != ''; $session.boxPlatformVersion = arg; end

    else
      $out.error 'Option is not supported: '+opt
  end
end

#Hello message
$out.info 'MariaDb CI CLI'
$out.info 'mdbci called with: '+ARGV.to_s

=begin
  run command (create config only for now)
=end

$session.checkConfig
$session.loadCollections

# run commands and return 0 for success, 1 for error

begin
  exit_code = $session.commands
rescue Exception => error
  $out.error error.backtrace.join("\n")
  $out.error error.to_s
  exit_code =  1
end

exit exit_code
