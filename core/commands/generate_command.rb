# frozen_string_literal: true

require 'date'
require 'fileutils'
require 'json'
require 'pathname'
require 'securerandom'
require 'socket'
require 'erb'
require 'set'
require_relative 'base_command'
require_relative '../out'
require_relative '../models/configuration.rb'
require_relative '../services/shell_commands'

# Command generates
class GenerateCommand < BaseCommand
  def self.synopsis
    'Generate a configuration based on the template.'
  end

  def self.role_file_name(path, role)
    "#{path}/#{role}.json"
  end

  def self.node_config_file_name(path, role)
    "#{path}/#{role}-config.json"
  end

  def vagrant_file_header
    <<-HEADER
# !! Generated content, do not edit !!
# Generated by MariaDB Continuous Integration Tool (https://github.com/mariadb-corporation/mdbci)
#### Created #{Time.now} ####
    HEADER
  end

  def aws_provider_config(aws_config, pemfile_path, keypair_name)
    <<-PROVIDER
    ###           AWS Provider config block                 ###
    ###########################################################
    config.vm.box = "dummy"

    config.vm.provider :aws do |aws, override|
      aws.keypair_name = "#{keypair_name}"
      override.ssh.private_key_path = "#{pemfile_path}"
      aws.region = "#{aws_config['region']}"
      aws.security_groups = ['default', '#{aws_config['security_group']}']
      aws.access_key_id = "#{aws_config['access_key_id']}"
      aws.secret_access_key = "#{aws_config['secret_access_key']}"
      aws.user_data = "#!/bin/bash\nsed -i -e 's/^Defaults.*requiretty/# Defaults requiretty/g' /etc/sudoers"
      override.nfs.functional = false
    end ## of AWS Provider config block
    PROVIDER
  end

  def provider_config
    <<-CONFIG
### Default (VBox, Libvirt) Provider config ###
#######################################################
# Network autoconfiguration
config.vm.network "private_network", type: "dhcp"
config.vm.boot_timeout = 60
    CONFIG
  end

  def vagrant_config_header
    <<-HEADER
### Vagrant configuration block  ###
####################################
Vagrant.configure(2) do |config|
    HEADER
  end

  def vagrant_config_footer
    <<-FOOTER
end
### end of Vagrant configuration block
    FOOTER
  end

  # Vagrantfile for Vbox provider
  # rubocop:disable Metrics/MethodLength
  def get_virtualbox_definition(_cookbook_path, node_params)
    template = ERB.new <<-VBOX
      config.vm.define '<%= name %>' do |box|
        box.vm.box = '<%= boxurl %>'
        box.vm.hostname = '<%= host %>'
        <% if ssh_pty %>
           box.ssh.pty = true
        <% end %>
        <% if template_path %>
           box.vm.synced_folder '<%= template_path %>', '/home/vagrant/cnf_templates'
        <% end %>
        box.vm.provider :virtualbox do |vbox|
          <% if vm_mem %>
             vbox.memory = <%= vm_mem %>
          <% end %>
          vbox.name = "\#{File.basename(File.dirname(__FILE__))}_<%= name %>"
        end
      end
    VBOX
    template.result(OpenStruct.new(node_params).instance_eval { binding })
  end
  # rubocop:enable Metrics/MethodLength

  # Vagrantfile for Libvirt provider
  # rubocop:disable Metrics/MethodLength
  def get_libvirt_definition(_cookbook_path, path, node_params)
    node_params = node_params.merge(expand_path: File.expand_path(path), ipv6: @env.ipv6)
    template = ERB.new <<-LIBVIRT
      #  --> Begin definition for machine: <%= name %>
      config.vm.define '<%= name %>' do |box|
        box.vm.box = '<%= boxurl %>'
        box.vm.hostname = '<%= host %>'
        <% if ssh_pty %>
          box.ssh.pty = true
        <% end %>
        <% if template_path %>
          box.vm.synced_folder '<%= template_path %>', '/home/vagrant/cnf_templates', type:'rsync'
        <% else %>
          box.vm.synced_folder '<%= expand_path %>', '/vagrant', type: 'rsync'
        <% end %>
        <% if ipv6 %>
          box.vm.network :public_network, :dev => 'virbr0', :mode => 'bridge', :type => 'bridge'
        <% end %>
        box.vm.provider :libvirt do |qemu|
          qemu.driver = 'kvm'
          qemu.cpus = '<%= vm_cpu %>'
          qemu.memory = <%= vm_mem %>
        end
      end #  <-- End of Qemu definition for machine: <%= name %>
    LIBVIRT
    template.result(OpenStruct.new(node_params).instance_eval { binding })
  end
  # rubocop:enable Metrics/MethodLength

  def get_package_manager_name(platform)
    case platform
    when 'ubuntu', 'debian' then 'apt'
    when 'centos', 'redhat' then 'yum'
    when 'suse' then 'zypper'
    else raise 'Unknown platform'
    end
  end

  def generate_aws_tag(hash)
    vagrantfile_tags = hash.map { |key, value| "'#{key}' => '#{value}'" }.join(', ')
    "{ #{vagrantfile_tags} }"
  end

  # Vagrantfile for AWS provider
  # rubocop:disable Metrics/MethodLength
  def get_aws_vms_definition(_cookbook_path, tags, node_params)
    node_params = node_params.merge(tags: tags)
    template = ERB.new <<-AWS
      #  --> Begin definition for machine: <%= name %>
      config.vm.define '<%= name %>' do |box|
        <% if ssh_pty %>
          box.ssh.pty = true
        <% end %>
        <% if template_path %>
          box.vm.synced_folder '<%=template_path %>', '/home/vagrant/cnf_templates', type: 'rsync'
        <% end %>
        box.vm.provider :aws do |aws, override|
          aws.ami = '<%= boxurl %>'
          aws.tags = <%= tags %>
          aws.instance_type = '<%= instance_type %>'
          aws.block_device_mapping = [{ 'DeviceName' => '/dev/sda1', 'Ebs.VolumeSize' => 100 }]
          override.ssh.username = '<%= user %>'
        end
      end #  <-- End of AWS definition for machine: <%= name %>
    AWS
    template.result(OpenStruct.new(node_params).instance_eval { binding })
  end
  # rubocop:enable Metrics/MethodLength

  def make_product_config(product_name, product, box, repo, error_text)
    repo = @env.repos.findRepo(product_name, product, box) if repo.nil?
    return error_text if repo.nil?
    config = { 'version': repo['version'], 'repo': repo['repo'], 'repo_key': repo['repo_key'] }
    if !product['cnf_template'].nil? && !product['cnf_template_path'].nil?
      config['cnf_template'] = product['cnf_template']
      config['cnf_template_path'] = product['cnf_template_path']
    end
    config['node_name'] = product['node_name'] unless product['node_name'].nil?
    attribute_name = @env.repos.attribute_name(product_name)
    { "#{attribute_name}": config }
  end

  def make_role_json(name, product_config, recipe_name)
    role = {
      name: name,
      default_attributes: {},
      override_attributes: product_config,
      json_class: 'Chef::Role',
      description: '',
      chef_type: 'role',
      run_list: ['recipe[mdbci_provision_mark::remove_mark]',
                 "recipe[#{recipe_name}]",
                 'recipe[mdbci_provision_mark::default]']
    }
    JSON.pretty_generate(role)
  end

  # Generate the role description for the specified node
  # @param name [String] internal name of the machine specified in the template
  # @param product [Hash] parameters of the product to configure
  # @param box information about the box
  # @return [String] pretty formated role description in JSON format
  # rubocop:disable Metrics/MethodLength
  def get_role_description(name, product, box)
    error_text = "#NONE, due invalid repo name \n"
    repo = nil
    if !product['repo'].nil?
      repo_name = product['repo']
      @ui.info("Repo name: #{repo_name}")
      unless @env.repos.knownRepo?(repo_name)
        @ui.warning("Unknown key for repo #{repo_name} will be skipped")
        return error_text
      end
      @ui.info("Repo specified [#{repo_name}] (CORRECT), other product params will be ignored")
      repo = @env.repos.getRepo(repo_name)
      product_name = @env.repos.productName(repo_name)
    else
      product_name = product['name']
    end
    recipe_name = @env.repos.recipe_name(product_name)
    product_config = if product_name != 'packages'
                       make_product_config(product_name, product, box, repo, error_text)
                     else
                       {}
                     end
    @ui.info("Recipe #{recipe_name}")
    make_role_json(name, product_config, recipe_name)
  end
  # rubocop:enable Metrics/MethodLength

  def check_path(path, override)
    if Dir.exist?(path) && !override
      @ui.error("Folder already exists: #{path}")
      @ui.error('Please specify another name or delete')
      exit(-1)
    end
    FileUtils.rm_rf(path)
    Dir.mkdir(path)
  end

  def box_valid?(box, boxes)
    return false if box.empty?
    !boxes.getBox(box).nil?
  end

  def make_node_params(node, box_params)
    params = {
      name: node[0].to_s,
      host: node[1]['hostname'].to_s,
      vm_mem: node[1]['memory_size'].nil? ? '1024' : node[1]['memory_size'].to_s,
      vm_cpu: (@env.cpu_count || node[1]['cpu_count'] || '1').to_s,
      provider: box_params['provider'].to_s
    }
    params[:ssh_pty] = box_params['ssh_pty'] == 'true' unless box_params['ssh_pty'].nil?
    params.merge!(if params[:provider] == 'aws'
                    { amiurl: box_params['ami'].to_s, user: box_params['user'].to_s,
                      instance: box_params['default_instance_type'].to_s }
                  else
                    { boxurl: box_params['box'].to_s, platform: box_params['platform'].to_s,
                      platform_version: box_params['platform_version'].to_s }
                  end)
  end

  def print_node_info(node_params, box)
    @ui.info("Requested memory #{node_params[:vm_mem]}")
    @ui.info("Requested number of CPUs #{node_params[:vm_cpu]}")
    if node_params[:provider] == 'aws'
      @ui.info("AWS definition for host:#{node_params[:host]}, ami:#{node_params[:amiurl]}, "\
               "user:#{node_params[:user]}, instance:#{node_params[:instance]}")
    end
    @ui.info("config.ssh.pty option is #{node_params[:ssh_pty]} for a box #{box}") unless node_params[:ssh_pty].nil?
  end

  def generate_node_defenition(node_params, cookbook_path, path)
    case node_params[:provider]
    when 'virtualbox'
      get_virtualbox_definition(cookbook_path, node_params)
    when 'aws'
      tags = generate_aws_tag('hostname' => Socket.gethostname, 'username' => Etc.getlogin,
                              'full_config_path' => File.expand_path(path), 'machinename' => name)
      get_aws_vms_definition(cookbook_path, tags, node_params)
    when 'libvirt'
      get_libvirt_definition(cookbook_path, path, node_params)
    else
      @ui.warning('Configuration type invalid! It must be vbox, aws or libvirt type. Check it, please!')
      ''
    end
  end

  # rubocop:disable Metrics/MethodLength
  def node_definition(node, boxes, path, cookbook_path)
    box = node[1]['box'].to_s
    unless box.empty?
      node_params = make_node_params(node, boxes.getBox(box))
      print_node_info(node_params, box)
    end
    provisioned = !node[1]['product'].nil?
    if provisioned
      product = node[1]['product']
      node_params[:template_path] = product['cnf_template_path'] unless product['cnf_template_path'].nil?
    else
      product = { 'name' => 'packages' }
    end
    @ui.info("Machine #{node_params[:name]} is provisioned by #{product}")
    # box with mariadb, maxscale provision - create role
    role = get_role_description(node_params[:name], product, box)
    IO.write(GenerateCommand.role_file_name(path, node_params[:name]), role)
    IO.write(GenerateCommand.node_config_file_name(path, node_params[:name]),
             JSON.pretty_generate('run_list' => ["role[#{node_params[:name]}]"]))
    # generate node definition
    if box_valid?(box, boxes)
      generate_node_defenition(node_params, cookbook_path, path)
    else
      @ui.warning("Box #{box} is not installed or configured ->SKIPPING")
      ''
    end
  end
  # rubocop:enable Metrics/MethodLength

  def generate_key_pair(path)
    full_path = File.expand_path(path)
    key_pair = @env.aws_service.generate_key_pair(full_path)
    path_to_keyfile = File.join(full_path, 'maxscale.pem')
    File.write(path_to_keyfile, key_pair.key_material)
    path_to_keypair_file = File.join(full_path, Configuration::AWS_KEYPAIR_NAME)
    File.write(path_to_keypair_file, key_pair.key_name)
    [path_to_keyfile, key_pair.key_name]
  end

  # Check that all boxes specified in the the template are identical.
  #
  # @param nodes [Array] list of nodes specified in template
  # @param boxes a list of boxes known to the configuration
  # @raise RuntimeError if there is the error in the configuration.
  def check_provider_equality(nodes, boxes)
    @ui.info('Checking node provider equality')
    boxes_names = nodes.map do |node|
      node[1]['box'].to_s
    end.reject(&:empty?)
    providers = boxes_names.map do |box|
      boxes.getBox(box)['provider'].to_s
    end
    raise 'Unable to detect the provider for all boxes. Please fix the template.' if providers.empty?
    unique_providers = Set.new(providers)
    return if unique_providers.size == 1
    raise "There are several node providers defined in the template: #{unique_providers.to_a.join(', ')}.\n"\
          'You can specify only nodes from one provider in the template.'
  end

  # rubocop:disable Metrics/MethodLength
  def generate_vagrant_file(path, config, boxes, provider, cookbook_path)
    vagrant = File.open(File.join(path, 'Vagrantfile'), 'w')
    vagrant.puts vagrant_file_header, vagrant_config_header
    if provider == 'aws'
      @ui.info('Generating AWS configuration')
      path_to_keyfile, keypair_name = generate_key_pair path
      vagrant.puts aws_provider_config(@env.tool_config['aws'], path_to_keyfile, keypair_name)
    else
      @ui.info('Generating libvirt/VirtualBox configuration')
      vagrant.puts provider_config
    end
    config.each do |node|
      unless node[1]['box'].nil?
        @ui.info("Generating node definition for [#{node[0]}]")
        vagrant.puts node_definition(node, boxes, path, cookbook_path)
      end
    end
    vagrant.puts vagrant_config_footer
    vagrant.close
  end
  # rubocop:enable Metrics/MethodLength

  def generate(path, config, boxes, override, provider)
    # TODO: MariaDb Version Validator
    check_path(path, override)
    check_provider_equality(config, boxes)
    cookbook_path = if config['cookbook_path'].nil?
                      File.join(@env.mdbci_dir, 'recipes', 'cookbooks') # default cookbook path
                    else
                      config['cookbook_path']
                    end
    @ui.info("Global cookbook_path = #{cookbook_path}")
    @ui.info("Nodes provider = #{provider}")
    generate_vagrant_file(path, config, boxes, provider, cookbook_path)
    if File.size?(File.join(path, 'Vagrantfile')).nil?
      raise 'Generated Vagrantfile is empty! Please check configuration file and regenerate it.'
    end
    SUCCESS_RESULT
  end
end
